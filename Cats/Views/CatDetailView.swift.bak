import SwiftUI

struct CatDetailView: View {
    let cat: Cat
    @EnvironmentObject private var catDataManager: CatDataManager
    @Environment(\.dismiss) private var dismiss
    @State private var showingEditSheet = false
    @State private var showingDeleteAlert = false
    
    var body: some View {
        ScrollView {
            VStack(spacing: Constants.UI.gridSpacing) {
                // 头像区域
                CatAvatarView(avatarData: cat.avatar)
                    .frame(width: Constants.UI.avatarSize * 1.5, height: Constants.UI.avatarSize * 1.5)
                
                // 基本信息
                VStack(alignment: .leading, spacing: 10) {
                    InfoRow(title: "名字", value: cat.name)
                    if let gender = cat.gender {
                        InfoRow(title: "性别", value: gender.rawValue)
                    }
                    if let birthDate = cat.birthDate {
                        InfoRow(title: "出生日期", value: birthDate.formattedDate)
                    }
                    if let weight = cat.weight {
                        InfoRow(title: "体重", value: weight.weightString)
                    }
                }
                .cardStyle()
                .padding(.horizontal)
            }
        }
        .navigationTitle(cat.name)
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Menu {
                    Button("编辑") {
                        showingEditSheet = true
                    }
                    Button("删除", role: .destructive) {
                        showingDeleteAlert = true
                    }
                } label: {
                    Image(systemName: "ellipsis.circle")
                        .foregroundColor(ThemeColors.forestGreen)
                }
            }
        }
        .sheet(isPresented: $showingEditSheet) {
            AddCatView(editingCat: cat)
        }
        .alert("删除猫咪", isPresented: $showingDeleteAlert) {
            Button("取消", role: .cancel) { }
            Button("删除", role: .destructive) {
                withAnimation {
                    catDataManager.deleteCat(cat)
                    dismiss()
                }
            }
        } message: {
            Text("确定要删除\(cat.name)吗？此操作不可撤销。")
        }
    }
}

// MARK: - 子视图
private struct InfoRow: View {
    let title: String
    let value: String
    
    var body: some View {
        HStack {
            Text(title)
                .foregroundColor(.gray)
            Spacer()
            Text(value)
        }
    }
} 