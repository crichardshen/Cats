import SwiftUI

struct ContentView: View {
    @EnvironmentObject private var catDataManager: CatDataManager
    @State private var showingAddCat = false
    @State private var searchText = ""
    
    private var filteredCats: [Cat] {
        if searchText.isEmpty {
            return catDataManager.cats
        }
        return catDataManager.cats.filter { $0.name.localizedCaseInsensitiveContains(searchText) }
    }
    
    var body: some View {
        ZStack {
            ThemeColors.paleGreen
                .ignoresSafeArea()
            
            VStack {
                if catDataManager.cats.isEmpty {
                    EmptyStateView(showingAddCat: $showingAddCat)
                } else {
                    CatGridView(cats: filteredCats)
                }
            }
        }
        .navigationTitle("我的猫咪")
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                AddButton(showingAddCat: $showingAddCat)
            }
        }
        .searchable(text: $searchText, prompt: "搜索猫咪")
        .sheet(isPresented: $showingAddCat) {
            AddCatView()
        }
    }
}

// MARK: - 子视图
private extension ContentView {
    struct EmptyStateView: View {
        @Binding var showingAddCat: Bool
        
        var body: some View {
            VStack(spacing: Constants.UI.gridSpacing) {
                Image(systemName: "cat.fill")
                    .resizable()
                    .scaledToFit()
                    .frame(width: Constants.UI.avatarSize)
                    .foregroundColor(ThemeColors.forestGreen)
                
                Text("还没有添加猫咪")
                    .font(.headline)
                    .foregroundColor(.gray)
                
                Button(action: { 
                    withAnimation {
                        showingAddCat = true 
                    }
                }) {
                    Text("添加猫咪")
                        .font(.headline)
                        .foregroundColor(.white)
                        .padding(.horizontal, 30)
                        .padding(.vertical, 15)
                        .background(ThemeColors.forestGreen)
                        .cornerRadius(25)
                }
            }
        }
    }
    
    struct CatGridView: View {
        let cats: [Cat]
        
        var body: some View {
            ScrollView {
                LazyVGrid(columns: [
                    GridItem(.flexible()),
                    GridItem(.flexible())
                ], spacing: Constants.UI.gridSpacing) {
                    ForEach(cats) { cat in
                        CatCardView(cat: cat)
                    }
                }
                .padding()
            }
        }
    }
    
    struct AddButton: View {
        @Binding var showingAddCat: Bool
        
        var body: some View {
            Button(action: { 
                withAnimation {
                    showingAddCat = true 
                }
            }) {
                Image(systemName: "plus.circle.fill")
                    .foregroundColor(ThemeColors.forestGreen)
                    .imageScale(.large)
            }
        }
    }
}

#Preview {
    NavigationView {
        ContentView()
            .environmentObject(CatDataManager.shared)
    }
} 